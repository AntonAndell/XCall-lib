/*
 * Copyright (c) 2022-2022 Balanced.network.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import dependencies.Dependencies


buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath Dependencies.javaeePlugin
        classpath "org.web3j:web3j-gradle-plugin:4.9.2"
    }
}

def scoreIntegrationTest = new HashMap<String, String>()

task buildContracts(type: Exec) {
    workingDir "$projectDir/"
    commandLine './gradlew', 'optimizedJar'
}


subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven { url "https://hyperledger.jfrog.io/artifactory/besu-maven/" }
        maven { url "https://artifacts.consensys.net/public/maven/maven/" }
        maven { url "https://splunk.jfrog.io/splunk/ext-releases-local" }
        maven { url "https://dl.cloudsmith.io/public/consensys/quorum-mainnet-launcher/maven/" }
        maven { url "https://repo.spring.io/ui/native/libs-release/" }
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'foundation.icon.javaee'
    apply plugin: 'org.web3j'
    apply plugin: 'com.github.node-gradle.node'

    sourceSets {
         main {
            java {
                srcDir 'build/generated/sources/annotationProcessor/java/main'
            }
        solidity {
                srcDir "src/main/solidity/contracts"
                include "**/*.sol"
                exclude "**/test/*.sol"
            }
        }
        intTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            java {
            }
        }

    }

    node {
        workDir = file("${rootProject.projectDir}/.gradle/nodejs")
        yarnWorkDir = file("${rootProject.projectDir}/.gradle/yarn")
        nodeProjectDir = project.projectDir
        download = false
    }
    npmInstall {
        enabled = false
    }

    configurations {
        intTestImplementation.extendsFrom testImplementation
        intTestAnnotationProcessor.extendsFrom testAnnotationProcessor
        intTestRuntimeOnly.extendsFrom testRuntimeOnly
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

     solidity {
        def nodeProjectDir = project.node.nodeProjectDir.asFile.get()
        def nodeModuleDir = projectDir.toPath().relativize(nodeProjectDir.toPath()).resolve("node_modules")
        resolvePackages = false
        def packageJsonFile = project.file("package.json")
        if (packageJsonFile.exists()) {
            def packageJson = new groovy.json.JsonSlurper().parseText(packageJsonFile.text)
            if (packageJson.dependencies != null) {
                pathRemappings = packageJson.dependencies.collectEntries {
                    k, v -> [k, nodeModuleDir.resolve(k).toString()]
                }
            }
        }
        pathRemappings.putAll([
                '../interfaces': 'interfaces',
                '../libraries' : 'libraries'
        ])
        allowPaths = pathRemappings.collect { k, v -> k }
        println "solidityPathRemappings:" + pathRemappings

        def tc = [
                source : "default",
            version : "0.8.2",
            evmVersion : "petersburg",
            optimize : true,
            optimizeRuns : 200
        ]
        def tcFile = project.file("truffle-config.js")
        if (tcFile.exists()) {
            def ne = com.github.gradle.node.NodeExtension.get(project)
            def vc = new com.github.gradle.node.variant.VariantComputer(com.github.gradle.node.util.PlatformHelper.INSTANCE)
            def nex = vc.computeNodeExec(ne, vc.computeNodeBinDir(vc.computeNodeDir(ne)))
            def sout = new ByteArrayOutputStream()
            def eout = new ByteArrayOutputStream()
            if (new File(nex.orNull).exists()) {
                exec {
                    standardOutput=sout
                    errorOutput=eout
                    executable = nex.orNull
                    args = ['-e','console.log(JSON.stringify(require("./truffle-config.js").compilers.solc))']
                    ignoreExitValue = true
                }
                if (sout.size() > 0) {
                    def tcJson = new groovy.json.JsonSlurper().parseText(sout.toString())
                    tc.source = "truffle-config.js"
                    tc.version = tcJson.version
                    tc.evmVersion = tcJson.settings.evmVersion
                    tc.optimize = tcJson.settings.optimizer.enabled
                    tc.optimizeRuns = tcJson.settings.optimizer.runs
                }
                if (eout.size() > 0) {
                    println eout
                }
            }
        }
        println "[$project.name] ${tc}"
        version = tc.version
        evmVersion = tc.evmVersion
        optimize = tc.optimize
        optimizeRuns = tc.optimizeRuns
    }

    // need to add this option to retrieve formal parameter names
    compileJava {
        options.compilerArgs += ['-parameters']
    }

    tasks.named('test') {
        // Use JUnit Platform for unit tests.
        useJUnitPlatform()
    }


    afterEvaluate { project ->
        scoreIntegrationTest.put(project.name, project.getTasks().getByName("optimizedJar").outputJarName)
    }

    tasks.named("assemble") {
        if (project.tasks.findByName("compileIntTestJava")) {
            finalizedBy(project.tasks.getByName("compileIntTestJava"))
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    taskGraph.getAllTasks().eachWithIndex { task, n ->
        if (task.name == 'integrationTest') {
            scoreIntegrationTest.each { key, val -> task.systemProperty key, val }
        }
    }
}
